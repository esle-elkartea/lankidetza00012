/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Lesser GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA.
 */

package bgc.gui.wysiwyg.draganddrop;

import bgc.gui.inicio.VInicio;
import bgc.gui.wysiwyg.draganddrop.clases.PanelCabcera;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.dnd.DragSource;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.StringTokenizer;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTextPane;
import javax.swing.SwingConstants;
import javax.swing.border.LineBorder;
import javax.swing.border.MatteBorder;
import javax.swing.filechooser.FileFilter;
import javax.swing.plaf.metal.MetalInternalFrameUI;

/**
 * Ventana de diseñador
 * @author Campus-Telematika S.L.
 */
public class VHTMLDND extends javax.swing.JInternalFrame  {
    
    /**
     * Creates new form VHTMLDND
     */
    public VHTMLDND() {
        super("Editor HTML Libre ..... Bergalcas");
        initComponents();
        ((MetalInternalFrameUI)this.getUI()).getNorthPane().removeAll();
        ((MetalInternalFrameUI)this.getUI()).getNorthPane().setLayout(new BorderLayout());
        ((MetalInternalFrameUI)this.getUI()).getNorthPane().add(new PanelCabcera(this));
        ((MetalInternalFrameUI)this.getUI()).getNorthPane().removeMouseListener(((MetalInternalFrameUI)this.getUI()).getNorthPane().getMouseListeners()[0]);
        setVisible(true);
        
        jLabel1.setIcon(botonImg);
        jLabel2.setIcon(botonTxt);
        
        jScrollPane1.setAutoscrolls(true);
        
        
        
        add_comp(jLabel1);
        add_comp(jLabel2);
        menuFondo.setLightWeightPopupEnabled(false);
        for (int i=0;i<jToolBar1.getComponentCount();i++) {
            
            jToolBar1.getComponent(i).addMouseListener(new MouseAdapter() {
                
                public void mouseEntered(MouseEvent evt) {
                    ((Component)evt.getSource()).setCursor(new Cursor(Cursor.HAND_CURSOR));
                }
                
                public void mouseExited(MouseEvent evt) {
                    ((Component)evt.getSource()).setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                }
            });
            
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        menuFondo = new javax.swing.JPopupMenu();
        cambiarColor = new javax.swing.JMenuItem();
        jToolBar1 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        documento = new JPanelHermes();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Nuevo = new javax.swing.JMenuItem();
        Abrir = new javax.swing.JMenuItem();
        AbrirR = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JSeparator();
        Guardar = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        Salir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        cambiarColor.setText("Cambiar color de fondo...");
        cambiarColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarColorActionPerformed(evt);
            }
        });

        menuFondo.add(cambiarColor);

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(146, 184, 65), 2));
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jToolBar1.setFloatable(false);
        jLabel1.setIcon(new javax.swing.ImageIcon("/home/aitor/Desktop/BGC/ejemplosJava/NetBeansDANDD/DragANDDrop/imgen.png"));
        jToolBar1.add(jLabel1);

        jLabel2.setIcon(new javax.swing.ImageIcon("/home/aitor/Desktop/BGC/ejemplosJava/NetBeansDANDD/DragANDDrop/texto.png"));
        jToolBar1.add(jLabel2);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hermes/imagenes/wysiwyg/boton_insertar_nombre.png")));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        jToolBar1.add(jLabel4);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hermes/imagenes/wysiwyg/boton_insertar_apellido.png")));
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });

        jToolBar1.add(jLabel5);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hermes/imagenes/wysiwyg/boton_vista_previa.png")));
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jToolBar1.add(jButton1);

        jScrollPane1.setAutoscrolls(true);
        documento.setBackground(new java.awt.Color(255, 255, 255));
        documento.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        documento.setAutoscrolls(true);
        org.jdesktop.layout.GroupLayout documentoLayout = new org.jdesktop.layout.GroupLayout(documento);
        documento.setLayout(documentoLayout);
        documentoLayout.setHorizontalGroup(
            documentoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 545, Short.MAX_VALUE)
        );
        documentoLayout.setVerticalGroup(
            documentoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 352, Short.MAX_VALUE)
        );
        jScrollPane1.setViewportView(documento);

        jMenu1.setText("Fichero");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        Nuevo.setText("Nuevo");
        Nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoActionPerformed(evt);
            }
        });

        jMenu1.add(Nuevo);

        Abrir.setText("Abrir");
        Abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirActionPerformed(evt);
            }
        });

        jMenu1.add(Abrir);

        AbrirR.setText("Abrir Recientes...");
        AbrirR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirRActionPerformed(evt);
            }
        });
        AbrirR.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                AbrirRFocusGained(evt);
            }
        });
        AbrirR.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                AbrirRMenuSelected(evt);
            }
        });

        jMenu1.add(AbrirR);

        jMenu1.add(jSeparator1);

        Guardar.setText("Guardar");
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });

        jMenu1.add(Guardar);

        jMenu1.add(jSeparator2);

        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });

        jMenu1.add(Salir);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edicion");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Ayuda");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        jMenu4.setText("Menu");
        jMenu3.add(jMenu4);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 311, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(240, Short.MAX_VALUE))
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Inserta el apellido en el componente seleccionado
     * @param evt Evento
     */
    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
// TODO add your handling code here:
        for (int i=0;i<documento.getComponentCount();i++) {
            JLabelHermes l= ((JLabelHermes)documento.getComponent(i));
            if ( l.getTipo()==JLabelHermes.TEXTO ) {
                
                if (l.getArea().isEditable()) {
                    
                    String texto=l.getArea().getText();
                  
                    
                    texto=texto.substring(0,texto.indexOf("<body>")+9)+texto.substring(texto.indexOf("<body>")+9,texto.indexOf("<body>")+9+l.getArea().getSelectionStart())+" &lt;var apellido&gt; "+texto.substring(texto.indexOf("<body>")+9+l.getArea().getSelectionStart());//    texto.substring(l.getArea().getSelectionStart());
                  
                    l.getArea().setText(texto);
                }
                
            }
            
        }
    }//GEN-LAST:event_jLabel5MouseClicked
        
    /**
     * Inserta el nombre en el componente seleccionado
     * @param evt Evento
     */
    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
// TODO add your handling code here:
        for (int i=0;i<documento.getComponentCount();i++) {
            JLabelHermes l= ((JLabelHermes)documento.getComponent(i));
            if ( l.getTipo()==JLabelHermes.TEXTO ) {
                
                if (l.getArea().isEditable()) {
                    
                    String texto=l.getArea().getText();
                    texto=texto.substring(0,texto.indexOf("<body>")+9)+texto.substring(texto.indexOf("<body>")+9,texto.indexOf("<body>")+9+l.getArea().getSelectionStart())+" &lt;var nombre&gt; "+texto.substring(texto.indexOf("<body>")+9+l.getArea().getSelectionStart());//    texto.substring(l.getArea().getSelectionStart());
                    l.getArea().setText(texto);
                }
                
            }
            
        }
    }//GEN-LAST:event_jLabel4MouseClicked
    
    /**
     * Previsualiza el Diseño realizado
     * @param evt Evento
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
        File f=new File(new File("C:\\Archivos de programa\\Campus-Telematika\\Hermes\\").getAbsolutePath()+"\\tmp");
        f.mkdir();
        this.escribirHTML(this.crearHTML(new File("C:\\Archivos de programa\\Campus-Telematika\\Hermes\\").getAbsolutePath()+"\\tmp"),new File("").getAbsolutePath()+"\\tmp\\tmp.html");
        Runtime rtt=Runtime.getRuntime();
        try {
            rtt.exec("cmd /c start iexplore \""+new File("C:\\Archivos de programa\\Campus-Telematika\\Hermes\\").getAbsolutePath()+"\\tmp\\tmp.html\"");;
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /**
     * Guarda el diseño realizado , tranformandolo a un HTML valido
     * @param evt evento
     */
    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
// TODO add your handling code here:
        
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Guardar HTML");
        chooser.setCurrentDirectory(new java.io.File("C:\\Archivos de programa\\Campus-Telematika\\Hermes"));
        int resultado = chooser.showSaveDialog(this.getParent());
        if (resultado == JFileChooser.APPROVE_OPTION){
            File fichero = new File(chooser.getSelectedFile().getAbsolutePath());
            try {
                fichero.createNewFile();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            
            this.escribirHTML(this.crearHTML(fichero.getPath().substring(0,fichero.getPath().lastIndexOf("\\"))),fichero.getPath());
        }
    }//GEN-LAST:event_GuardarActionPerformed
    
    /**
     * Cierra el diseñador
     * @param evt Evento
     */
    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
// TODO add your handling code here:
        VInicio v = new VInicio();
        this.getParent().add(v);
        eliminarTemporal();
        this.dispose();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        v.setLocation(screenSize.width/2-v.getSize().width/2, screenSize.height/2-v.getSize().height/2);
        v.show();
    }//GEN-LAST:event_SalirActionPerformed
    
    /**
     * 
     * @param evt 
     */
    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
// TODO add your handling code here:
        
    }//GEN-LAST:event_jMenu3ActionPerformed
    
    /**
     * muestra un menu contextual para cambiar el color de fondo
     * @param evt Evento
     */
    private void documentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_documentoMouseClicked
// TODO add your handling code here:
        if (evt.getButton()==MouseEvent.BUTTON3)
            menuFondo.show(documento,evt.getX(),evt.getY());
        
    }//GEN-LAST:event_documentoMouseClicked
    
    /**
     * Cambia el color del fondo
     * @param evt Evento
     */
    private void cambiarColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarColorActionPerformed
// TODO add your handling code here:
        JColorChooser vcolor=new JColorChooser();
        Color c=vcolor.showDialog(null,"Seleccion de color",documento.getBackground());
        documento.setBackground(c);
        
        
        
    }//GEN-LAST:event_cambiarColorActionPerformed
    
    /**
     * 
     * @param evt 
     */
    private void AbrirRMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_AbrirRMenuSelected
// TODO add your handling code here:
        AbrirR.removeAll();
        Reciente []Re=Reciente.leerRecientes();
        
        for(int i=0;i<Array.getLength(Re);i++) {
            JMenuItem mit=new JMenuItem();
            mit.setText(Re[i].getNombreAbsoluto());
            mit.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent x) {
                    mitActionPerformed(x);
                }
            });
            
            AbrirR.add(mit);
            
            
        }
        
    }//GEN-LAST:event_AbrirRMenuSelected
    
    /**
     * Carga los documentos recientes
     * @param evt Evento
     */
    private void AbrirRFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_AbrirRFocusGained
// TODO add your handling code here:
        
    }//GEN-LAST:event_AbrirRFocusGained
    
    /**
     * 
     * @param evt 
     */
    private void AbrirRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirRActionPerformed
// TODO add your handling code here:
        
    }//GEN-LAST:event_AbrirRActionPerformed
    
    
    /**
     * Cargamos el documento reciente seleccionado
     * @param evt Evento
     */
    private void  mitActionPerformed(java.awt.event.ActionEvent evt) {
        
        String fich= ((JMenuItem)evt.getSource()).getText();
        FileReader fs = null;
        char[] buffer = new char[81];
        File fichero = new File(fich);
        String str, str1="";
        try {
            BufferedReader br = new BufferedReader(new FileReader(fichero));
            while ((str = br.readLine()) != null) {
                str1+=str;
      
            }
            
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
        str1=aMinusculasLasEtiquetas(str1);
    
        int posImg=str1.indexOf("<title>");
        int posFinImg=str1.indexOf("</title>",posImg+1);
        int bi=str1.indexOf("<body");
        int bf=str1.indexOf(">",bi+1);
        String colorF=str1.substring(bi,bf);
        Color c=new Color(Integer.parseInt(colorF.substring(colorF.indexOf("#")+2,colorF.indexOf("\'",colorF.indexOf("#")+1)),16));
        documento.setBackground(c);
        this.setTitle("Editor HTML Libre  Bergalcas....."+str1.substring(posImg+7,posFinImg));
        str1=str1.substring(str1.indexOf("<body>")+6,str1.indexOf("</body>"));
        
        mostrarTextos(str1);
        mostrarImagenes(str1);
        
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(screenSize.width-80,screenSize.height-120);
    }
    
    /**
     * 
     * @param evt 
     */
    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed
    
    /**
     * Carga el documento HTML
     * @param evt Evento
     */
    private void AbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirActionPerformed
// TODO add your handling code here:
        documento.removeAll();
        documento.setBackground(Color.WHITE);
        this.validate();
        this.repaint();
        String fich=cargarHTML();
        Reciente.guardarReciente(new Reciente(fich));
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(screenSize.width-80,screenSize.height-120);
        
    }//GEN-LAST:event_AbrirActionPerformed
    
    /**
     * Limpia el diseñador
     * @param evt Evento
     */
    private void NuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoActionPerformed
// TODO add your handling code here:
        documento.removeAll();
        documento.setBackground(Color.WHITE);
        this.validate();
        this.repaint();
    }//GEN-LAST:event_NuevoActionPerformed
    
    
    /**
     * Pasa a minisculas todas las etiquetas del HTML
     * @param htmlOriginal Html a modificar
     * @return HTML modificado
     */
    public String aMinusculasLasEtiquetas(String htmlOriginal) {
        String html=htmlOriginal;
        html=html.replaceAll("<TITLE>","<title>");
        html=html.replaceAll("</TITLE>","</title>");
        html=html.replaceAll("<HTML>","<html>");
        html=html.replaceAll("</HTML>","</html>");
        html=html.replaceAll("<HEAD>","<head>");
        html=html.replaceAll("</HEAD>","</head>");
        html=html.replaceAll("<IMG","<img");
        html=html.replaceAll("<FONT","<font");
        html=html.replaceAll("</FONT>","</font>");
        html=html.replaceAll("<BODY","<body");
        html=html.replaceAll("</BODY>","</body>");
        html=html.replaceAll("<DIV","<div");
        html=html.replaceAll("</DIV>","</div>");
        
        
        return html;
    }
    
    
    /**
     * Lee el fichero con el HTML
     * @param fich Fichero HTML
     * @return Texto con el HTML
     */
    public static String leerHTML(String fich) {
        String str, str1="";
        try {
            BufferedReader br = new BufferedReader(new FileReader(fich));
            while ((str = br.readLine()) != null) {
                str1+=str;
                
            }
            return str1;
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        return str1;
    }
    
    /**
     * Carga el HTML
     * @return Texto HTML
     */
    public String cargarHTML() {
        
        FileReader fs = null;
        char[] buffer = new char[81];
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Abrir HTML");
        chooser.setCurrentDirectory(new java.io.File("C:\\Archivos de programa\\Campus-Telematika\\Hermes"));
         FileFilter filtroObj = new FileFilter() {
            public boolean accept(File f) {
                return f.getName().toLowerCase().endsWith(".html") || f.getName().toLowerCase().endsWith(".htm") || f.isDirectory();
            }
            public String getDescription() {
                return "Documentos HTML";
            }
        };
        chooser.setFileFilter(filtroObj);
        int resultado = chooser.showOpenDialog(this.getParent());
        if (resultado == JFileChooser.APPROVE_OPTION){
            
            
         
            File fichero = new File(chooser.getSelectedFile().getAbsolutePath());
            
            String str, str1="";
            try {
                BufferedReader br = new BufferedReader(new FileReader(fichero));
                while ((str = br.readLine()) != null) {
                    str1+=str;
                    
                }
                
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            
            str1=aMinusculasLasEtiquetas(str1);
       
            int posImg=str1.indexOf("<title>");
            int posFinImg=str1.indexOf("</title>",posImg+1);
            
           // this.setTitle("Editor HTML Libre  Bergalcas....."+str1.substring(posImg+7,posFinImg));
            int bi=str1.indexOf("<body");
            int bf=str1.indexOf(">",bi+1);
            String colorF=str1.substring(bi,bf);
            Color c=new Color(Integer.parseInt(colorF.substring(colorF.indexOf("#")+1,colorF.indexOf("\'",colorF.indexOf("#")+1)),16));
            documento.setBackground(c);
            str1=str1.substring(str1.indexOf("<body")+6,str1.indexOf("</body>"));
            
            
            mostrarTextos(str1);
            mostrarImagenes(str1);
            
            return chooser.getSelectedFile().getAbsolutePath();
        }
        return "";
    }
    
    /**
     * Saca del HTML las imagenes y las carga en el diseñador
     * @param html Texto con el HTML
     */
    public void mostrarImagenes(String html) {
        int cont=0;
        
        for(int i=0;i<html.length();i++) {
            if(html.substring(i).startsWith("<img")) {
                cont++;
            }
        }
        
        int vp=0;
        int posicionCopia=0;
        while(vp<=cont) {
            int posImg=html.indexOf("<img");
            int posFinImg=html.indexOf(">",posImg+1);
            if (posImg<0) {
                posImg=html.length();
                
                html+=(html.substring(posicionCopia,posImg));
                vp++;
            } else{
                html+=(html.substring(posicionCopia,posImg));
                
                String imagen=html.substring(posImg,posFinImg);
                int pi,pf;
                pi=imagen.indexOf('"');
                pf=imagen.indexOf('"',pi+1);
                String tmp=imagen.substring(pf);
                imagen=imagen.substring(pi+1,pf);
                int wi=tmp.indexOf("width=\"");
                int wf=tmp.indexOf("\"",wi+8);
                int hi=tmp.indexOf("height=\"");
                int hf=tmp.indexOf("\"",hi+9);
                int ancho=Integer.parseInt(tmp.substring(wi+7,wf));
                int largo=Integer.parseInt(tmp.substring(hi+8,hf));
                int posxI,posxF,posx,posyI,posyF,posy;
                posxI=tmp.indexOf("left:");
                posxF=tmp.indexOf("px;top:");
                posx=Integer.parseInt(tmp.substring(posxI+5,posxF));
                posyI=posxF+7;
                posyF=tmp.indexOf("px;z-i");
                posy=Integer.parseInt(tmp.substring(posyI,posyF));
                
                vp++;
                html=html.substring(posFinImg+1);
                
                JLabelHermes label=new JLabelHermes(JLabelHermes.IMAGEN);
                label.setIcon(new ImageIcon(imagen));
                label.setNombreImagen(imagen);
                label.setSize(ancho,largo);
                documento.add( new_lab(label,posx,posy));
                documento.repaint();
                
                posicionCopia=0;
                
            }
        }
        
    }
    
    
    /**
     * Obtiene el tamaño de la fuente
     * @param tam 
     * @return 
     */
    public String obtenerTamFuente(int tam) {
        
        return (""+((tam%10)+1)+"px"  );
        
    }
    
    
    /**
     * 
     * @param fuente 
     * @return 
     */
    public Font obtenerFuente(String fuente) {
        int fini=fuente.indexOf("face=\"");
        int fin=fuente.indexOf("\"",fini+6);
        String face=fuente.substring(fini+6,fin);
        fini=fuente.indexOf("size=\"");
        fin=fuente.indexOf("\"",fini+6);
        String tam=fuente.substring(fini+6,fin);
        fini=fuente.indexOf("color=\"");
        fin=fuente.indexOf("\"",fini+7);
        String color=fuente.substring(fini+7,fin);
        Color c=null;
        if(color.equals("")) {
            c=new Color(0);
        } else
            c=Color.decode(color);
        int s=0;
        try{
            s=Integer.parseInt(tam);
        }catch(NumberFormatException ex) {
////            s=Integer.parseInt(tam.substring(1));
        }
        if (s>0)
            s++;
        
        
        switch(s) {
            case -3:s=7;break;
            case -2:s=8;break;
            case -1:s=9;break;
            case 0:
            case 1:s=10;break;
            case 2:s=11;break;
            case 3:s=12;break;
            case 4:s=13;break;
            case 5:s=14;break;
            case 6:s=15;break;
            case 7:s=16;break;
            
            
        }
        
        return new Font(face,c.getRGB(),s);
    }
    
    /**
     * 
     * @param fuente 
     * @return 
     */
    public Color obtenerColor(String fuente) {
        int fini=fuente.indexOf("face=\"");
        int fin=fuente.indexOf("\"",fini+6);
        String face=fuente.substring(fini+6,fin);
        fini=fuente.indexOf("size=\"");
        fin=fuente.indexOf("\"",fini+6);
        String tam=fuente.substring(fini+6,fin);
        fini=fuente.indexOf("color=\"#");
        fin=fuente.indexOf("\"",fini+8);
        String color="";
        if (fini!=-1) {
            color=fuente.substring(fini+8,fin);
        }
        Color c=null;
        if(color.equals("")) {
            c=new Color(0);
        } else{
            
            c=new Color(Integer.parseInt(color,16));
        }
        return c;
    }
    
    
    /**
     * 
     * @param texto 
     * @param tam 
     * @return 
     */
    public Dimension obtenerTamanyo(String texto,int tam) {
        
        int t=0;
        int br=texto.indexOf("<br>");
        if(br>=0) {
            t=(br*tam)+10;
        }
        StringTokenizer st=new StringTokenizer(texto,"<br>");
        int y=st.countTokens();
     
        return new Dimension(t,y);
        
        
    }
    
    /**
     * 
     * @param texto 
     * @return 
     */
    public int obtenerColumnas(String texto) {
        
        int posT=texto.indexOf(">");
        String txt=texto.substring(posT+1);
        int t=0;
        if (texto.indexOf("<br>")==-1) {
            
            int posF=texto.indexOf("</");
            t=texto.substring(posT+1,posF).length();
            
        }else {
            while (txt.indexOf("<br>")!=-1) {
                int br=txt.indexOf("<br>");
                if(t<br) {
                    t=br;
                    
                }
                txt=txt.substring(br+3);
            }
            
        }
        return t;
        
        
    }
    
    /**
     * 
     * @param texto 
     * @return 
     */
    public int obtenerFilas(String texto) {
        int cont=1;
        
        StringTokenizer st=new StringTokenizer(texto);
        
        while(st.hasMoreTokens()) {
            String tmp=st.nextToken();
            if (tmp.indexOf("<br>")>=0)
                cont++;
        }
        
        
        
        
        
        return cont;
        
        
    }
    
    /**
     * Quita los blancos del texto
     * @param texto Texto a modificar
     * @return Texto modificado
     */
    public String quitarBlancos(String texto) {
        String t="";
        StringTokenizer st=new StringTokenizer(texto);
        t=st.nextToken();
        while(st.hasMoreTokens()) {
            t+=" "+st.nextToken();
        }
        return t;
    }
    
    /**
     * Extrae del Html los textos y los muestra en el diseñador
     * @param html Texto con el HTML
     */
    public void mostrarTextos(String html) {
        int cont=0;
        
        for(int i=0;i<html.length();i++) {
            if(html.substring(i).startsWith("<div")) {
                cont++;
            }
        }
        int vp=0;
        int posicionCopia=0;
        String fuente;
        while(vp<cont) {
            int posDiv=html.indexOf("<div");
            int posFinDiv=html.indexOf(">",posDiv+1);
            if (posDiv>=0) {
                
                String tmp=html.substring(posDiv,posFinDiv);
                
                int poscI,poscF;
                poscI=tmp.indexOf("#");
                poscF=poscI+7;
                Color backcol=null;
                if (poscI>=0)
                    backcol=new Color(Integer.parseInt(tmp.substring(poscI+1,poscF),16));
                else backcol=new Color(0);
                int posxI,posxF,posx,posyI,posyF,posy;
                posxI=tmp.indexOf("left:");
                posxF=tmp.indexOf("px;top:");
                posx=Integer.parseInt(tmp.substring(posxI+5,posxF));
                posyI=posxF+7;
                posyF=tmp.indexOf("px;z-i");
                posy=Integer.parseInt(tmp.substring(posyI,posyF));
                int posWI,posWF,posHI,posHF,ancho,alto;
                posWI=tmp.indexOf("width:");
                posWF=tmp.indexOf("px;height:");
                ancho=Integer.parseInt(tmp.substring(posWI+6,posWF));
                posHI=posWF+10;
                posHF=tmp.indexOf("px;",posHI);
                alto=Integer.parseInt(tmp.substring(posHI,posHF));
                int posFont=html.indexOf("<font");
                int posFinFont=html.indexOf(">",posFont+1);
                try{
                    fuente=html.substring(posFont+5,posFinFont);
                    Font fuen=obtenerFuente(fuente);
                    Color col=obtenerColor(fuente);
                    // html=html.substring(posFinFont);
                    int fint=html.indexOf("</div>",2);
//                String texto=html.substring(1,fint);
                    String texto=html.substring(posFont,fint);
//                texto=texto.replaceAll("<br>","\n");
                    //texto=quitarBlancos(texto);
                    JLabelHermes label=new JLabelHermes(JLabelHermes.TEXTO);
                    
                    //  label.getArea().setText(texto.replaceAll("<br>","\n\r"));
                    label.getArea().setText(texto);
                    label.getArea().setBackground(backcol);
                    
//                int nc=//obtenerColumnas(texto);
//                int nf=obtenerFilas(texto);
//                if (fuen.getSize()>11) {
                    label.getArea().setSize(ancho,alto);//(nc+3)*fuen.getSize(),(int)((nf+5)*(fuen.getSize())));
//                } else
//                    if (fuen.getSize()<9) {
//                    label.getArea().setSize((int)(nc/1.5)*fuen.getSize(),(int)((nf+2)*(fuen.getSize())));
//                    }else {
//                    label.getArea().setSize((int)(nc-20)*fuen.getSize(),(int)((nf+5)*(fuen.getSize())));
//                    }
                    label.setSize(label.getArea().getWidth()+10,label.getArea().getHeight()+10);
              
                    //  label.getArea().setFont(fuen);
                    // label.getArea().setForeground(col);
                    label.setFuente(fuen);
                    label.setColorFuente(col);
//                label.setSize(label.getArea().getSize());
//
//
//
                    html=html.substring(fint+6);
                    documento.add( new_lab(label,posx,posy));
                    documento.repaint();
                }catch(java.lang.StringIndexOutOfBoundsException ex){}
            }
            vp++;
            
            
        }
        
        
        
    }
    
    /**
     * Copia un html de un lugar a otro
     * @param str Fichero original
     * @param dir Destino
     */
    public static void copiarHTML(String str,String dir) {
        
        FileWriter fs = null;
        
        String nombreFich =dir;
        File fichero = null;
        for (int i=0;i<str.length();i++) {
            if (str.charAt(i)=='\\')
                str=str.substring(0,i)+"/"+str.substring(i+1);
        }
        
        try {
            fichero = new File(nombreFich);
            fs = new FileWriter(fichero);
            
            
            String s=str;
            int cont=0;
            
            for(int i=0;i<s.length();i++) {
                if(s.substring(i).startsWith("<img")) {
                    cont++;
                }
            }
            
            int vp=0;
            int posicionCopia=0;
            while(vp<=cont) {
                int posImg=s.indexOf("<img");
                int posFinImg=s.indexOf(">",posImg+1);
                if (posImg<0) {
                    posImg=s.length();
                    
                    s+=(s.substring(posicionCopia,posImg));
                    vp++;
                } else{
                    s+=(s.substring(posicionCopia,posImg));
                    
                    String imagen=s.substring(posImg,posFinImg);
                    int pi,pf;
                    pi=imagen.indexOf('"');
                    pf=imagen.indexOf('"',pi+1);
                    String tmp=imagen.substring(pf);
                    imagen=imagen.substring(pi+1,pf);
                    int wi=tmp.indexOf("width=\"");
                    int wf=tmp.indexOf("\"",wi+8);
                    int hi=tmp.indexOf("height=\"");
                    int hf=tmp.indexOf("\"",hi+9);
                    int ancho=Integer.parseInt(tmp.substring(wi+7,wf));
                    int largo=Integer.parseInt(tmp.substring(hi+8,hf));
                    int posxI,posxF,posx,posyI,posyF,posy;
                    posxI=tmp.indexOf("left:");
                    posxF=tmp.indexOf("px;top:");
                    posx=Integer.parseInt(tmp.substring(posxI+5,posxF));
                    posyI=posxF+7;
                    posyF=tmp.indexOf("px;z-i");
                    posy=Integer.parseInt(tmp.substring(posyI,posyF));
                    
                    vp++;
                     
                    
                    
                    s=s.substring(posFinImg+1);
                    String destino=dir.substring(0,dir.lastIndexOf("\\")+1)+imagen.substring(imagen.lastIndexOf("/")+1);
                    for (int i=0;i<destino.length();i++) {
                        if (destino.charAt(i)=='\\')
                            destino=destino.substring(0,i)+"/"+destino.substring(i+1);
                    }
                    copiar(imagen,destino);
                    str=str.replaceAll(imagen,destino);
                    posicionCopia=0;
                    
                }
            }
            for (int i=0;i<str.length();i++) {
            if ((str.charAt(i)=='/')&& (str.charAt(i-1)!='<'))
                str=str.substring(0,i)+"\\"+str.substring(i+1);
        }
            fs.write(str, 0, str.length());
        }catch(IOException e) {
            System.out.println("Error: " + e.toString());
        } finally {
            try {
                if (fs != null) fs.close();
            }catch (IOException e1) {
                System.out.println("Error: " + e1.toString());
            }
        }
        
    }
    
    
    /**
     * Escribe el HTML en fichero
     * @param str Texto HTML
     * @param dir Directorio destino
     */
    public static void escribirHTML(String str,String dir) {
        
        FileWriter fs = null;
        
        String nombreFich =dir;
        File fichero = null;
        
        try {
            fichero = new File(nombreFich);
            fs = new FileWriter(fichero);
            fs.write(str, 0, str.length());
            
        }catch(IOException e) {
            System.out.println("Error: " + e.toString());
        } finally {
            try {
                if (fs != null) fs.close();
            }catch (IOException e1) {
                System.out.println("Error: " + e1.toString());
            }
        }
        
    }
    
    /**
     * Copia un fichero
     * @param origen Fichero Origen
     * @param dest Ficher destino
     */
    public static void copiar(String origen,String dest) {
        try {
            File fo=new File(origen);
            File fd=new File(dest);
            FileInputStream fis  = new FileInputStream(fo);
            FileOutputStream fos = new FileOutputStream(fd);
            byte[] buf = new byte[1024];
            int i = 0;
            while((i=fis.read(buf))!=-1) {
                fos.write(buf, 0, i);
            }
            fis.close();
            fos.close();
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
        
        
    }
    
    
    /**
     * Vacia la carpeta tmp donde se almacenan temporalmente los HTML
     */
    public static void eliminarTemporal()
    {
    File f=new File("tmp");
    
    int cont=Array.getLength(f.listFiles());
    
    for(int i=0;i<cont;i++)
        f.listFiles()[0].delete();
        
        
    }
    
    /**
     * Elimina del texto las cabecears de HTML
     * @param html Texto a modificar
     * @return Texto modificado
     */
    public String quitarCabeceras(String html) {
        String s=html;
        s=aMinusculasLasEtiquetas(s);
        s=s.replaceAll("<html>","");
        s=s.replaceAll("</html>","");
        s=s.replaceAll("<body>","");
        s=s.replaceAll("</body>","");
        s=s.replaceAll("<title>","");
        s=s.replaceAll("</title>","");
        s=s.replaceAll("<head>","");
        s=s.replaceAll("</head>","");
        s=s.replaceAll("\n","");
        return s;
    }
    
    /**
     * Crea un HTML en base al diseño realizado
     * @param dir Direccion de las imagenes
     * @return Texto HTML
     */
    public  String crearHTML(String dir) {
        String r="",g="",b="";
        if (documento.getBackground().getRed()>9 )
            r=Integer.toHexString(documento.getBackground().getRed());
        else    r="0"+Integer.toHexString(documento.getBackground().getRed());
        
        if (documento.getBackground().getGreen()>9 )
            g=Integer.toHexString(documento.getBackground().getGreen());
        else    g="0"+Integer.toHexString(documento.getBackground().getGreen());
        
        if (documento.getBackground().getBlue()>9 )
            b=Integer.toHexString(documento.getBackground().getBlue());
        else    b="0"+Integer.toHexString(documento.getBackground().getBlue());
        
        String html="<HTML>\n<HEAD>\n<title>\n\tPRUEBA\n</title>\n</HEAD>\n<BODY BGCOLOR='#"+ r+""+g+""+b+"' >\n";
        JLabelHermes []A=new JLabelHermes[documento.getComponentCount()];
        for(int i=0;i<documento.getComponentCount();i++)
            A[i]=(JLabelHermes)(documento.getComponent(i));
        
        for(int i=0;i<Array.getLength(A);i++)
            for(int k=i+1;k<Array.getLength(A);k++)
                if (A[k].esMenor(A[i])) {
            JLabelHermes aux=A[i];
            A[i]=A[k];
            A[k]=aux;
                }
        
        for(int i=0;i<Array.getLength(A);i++) {
            String str="";
            if(A[i].getTipo()==JLabelHermes.TEXTO) {
                if (A[i].getColorFuente().getRed()>9 )
                    r=Integer.toHexString(A[i].getColorFuente().getRed());
                else    r="0"+Integer.toHexString(A[i].getColorFuente().getRed());
                
                if (A[i].getColorFuente().getGreen()>9 )
                    g=Integer.toHexString(A[i].getColorFuente().getGreen());
                else    g="0"+Integer.toHexString(A[i].getColorFuente().getGreen());
                
                if (A[i].getColorFuente().getBlue()>9 )
                    b=Integer.toHexString(A[i].getColorFuente().getBlue());
                else    b="0"+Integer.toHexString(A[i].getColorFuente().getBlue());
                if (A[i].getArea().getBackground().equals(Color.WHITE))
                    
                    str="<div style=\"position:absolute;left:"+(A[i].getX())+"px;top:"+(A[i].getY())+"px;z-index:"+i+"\" width:"+(A[i].getWidth()) +"px;height:"+(A[i].getHeight()) +"px;> <font face=\""+A[i].getFuente().getFontName()+"\" size=\""+(obtenerTamFuente((A[i].getFuente().getSize())))+"\" foreground-color=\"#"+r+""+g+""+b +"\" >"+cambiarSL(quitarCabeceras(A[i].getArea().getText()))+"</font></div>\n";
                else
                    str="<div style=\"position:absolute;left:"+A[i].getX()+"px;top:"+A[i].getY()+"px;z-index:"+i+"\" width:"+A[i].getWidth() +"px;height:"+A[i].getHeight() + "px; layer-background-color:#"+A[i].getArea().getBackground().getRGB()+"> <font face=\""+A[i].getFuente().getFontName()+"\" size=\""+obtenerTamFuente((A[i].getFuente().getSize()))+"\" foreground-color=\"#"+r+""+g+""+b +"\" >"+cambiarSL(quitarCabeceras(A[i].getArea().getText()))+"</font></div>\n";
            }else {
                
                String nim=dir+""+A[i].getNombreImagen().substring(A[i].getNombreImagen().lastIndexOf("\\"));
                
                str="<img src=\""+nim +"\"  width=\""+A[i].getWidth()+"\" height=\""+A[i].getHeight()+"\"  style=\"position:absolute;left:"+A[i].getX()+"px;top:"+A[i].getY()+"px;z-index:"+i+"\">\n";
                
                copiar(A[i].getNombreImagen(),nim);
                
            }
            
            html=html+str;
        }
        
        html=html+"\n</BODY>\n</HTML>";
        return html;
    }
    
    /**
     * Cambiar los saltos de linea
     * @param s Texto
     * @return Texto Modificado
     */
    public String cambiarSL(String s) {
        s=s.replaceAll("\n","<br>");
        return s;
    }
    
    
    
    /**
     * Comprueba si el componente esta en el diseño
     * @param c Componente a buscar
     * @return Retorna si esta o no esta el componente
     */
    public boolean esta(Component c) {
        for(int i=0;i<documento.getComponentCount();i++) {
            if(documento.getComponents()[i].equals(c))
                return true;
        }
        return false;
        
    }
    
    
    /**
     * Crea un nuevo componente para insertarlo en el diseño
     * @param co Componente a insertar
     * @param x posicion x
     * @param y posicion y
     * @return Componente insertado
     */
    private Component new_lab(JLabel co, int x, int y) //function to draw label in new posn
    {
        
        if ( co.getIcon()==botonImg )//El componente es una imagen
        {
            
            JFileChooser chooser = new JFileChooser();
            chooser.setDialogTitle("Abrir imagen");
            chooser.setCurrentDirectory(new java.io.File("C:\\Archivos de programa\\Campus-Telematika\\Hermes"));
            int resultado = chooser.showOpenDialog(this.getParent());
            if (resultado == JFileChooser.APPROVE_OPTION){
                JLabelHermes label = new JLabelHermes(JLabelHermes.IMAGEN);
                label.setNombreImagen( chooser.getSelectedFile().getAbsolutePath() );
                label.setIcon(new ImageIcon(chooser.getSelectedFile().getAbsolutePath()));
                
                label.setOpaque(true);
                label.setHorizontalAlignment(SwingConstants.CENTER);
                label.setForeground(co.getForeground());
                label.setBackground(co.getBackground());
                //label.setBounds(x,y,co.getWidth(),co.getHeight());
                label.setBounds(x,y,label.getIcon().getIconWidth(),label.getIcon().getIconHeight());
//              add_Panel(label);
                label.getCapa().setSize(label.getSize());
                mak_lis_Doc(label);
                return(label);//add_Panel(label));
            }
        } else if(co.getIcon()==botonTxt)//El componete es un texto
        {
            
            
            
            JLabelHermes label = new JLabelHermes(JLabelHermes.TEXTO);
            DialogoEntradaTexto dig=new DialogoEntradaTexto(null,true,label.getArea());
            dig.setVisible(true);
            
            label.getCapa().setSize(label.getArea().getWidth()+4,label.getArea().getHeight()+4);
            label.setOpaque(true);
            label.setHorizontalAlignment(SwingConstants.CENTER);
            label.setForeground(co.getForeground());
            label.setBackground(co.getBackground());
            label.setBounds(x,y,label.getCapa().getWidth()+5,label.getCapa().getHeight()+5);
            
            mak_lis_Doc(label);
            return(label);
        } else {
            if(((JLabelHermes)co).getTipo()==JLabelHermes.IMAGEN) {
                
                JLabelHermes label = new JLabelHermes(JLabelHermes.IMAGEN);
                label.setIcon(co.getIcon());
                label.setNombreImagen(((JLabelHermes)co).getNombreImagen());
                label.setOpaque(true);
                label.setHorizontalAlignment(SwingConstants.CENTER);
                label.setForeground(co.getForeground());
                label.setBackground(co.getBackground());
                label.setBounds(x,y,co.getWidth(),co.getHeight());
                label.getCapa().setSize(label.getSize());
//                add_Panel(label);
                mak_lis_Doc(label);
                return(label);//add_Panel(label));
            } else{
                
                JLabelHermes label = new JLabelHermes(JLabelHermes.TEXTO);
                label.getArea().setText(((JLabelHermes)co).getArea().getText());
                label.getArea().setFont(((JLabelHermes)co).getArea().getFont());
                label.getArea().setSize(((JLabelHermes)co).getArea().getSize());
                
                label.setOpaque(true);
                
                label.setHorizontalAlignment(SwingConstants.CENTER);
                label.setForeground(co.getForeground());
                label.setBackground(co.getBackground());
                label.setBounds(x,y,co.getWidth(),co.getHeight());
                label.getCapa().setSize(label.getSize());
//              add_Panel(label);
                mak_lis_Doc(label);
                return(label);//add_Panel(label));
            }
        }
        return null;
    }
    
    
    
    /**
     * Prepara el componente para insertarlo
     * @param l Componente a preparar
     */
    private void add_comp(JLabel l) {
     
        l.setOpaque(true);
        l.setHorizontalAlignment(SwingConstants.CENTER);
        l.setForeground(Color.black);
      
        mak_lis(l);
    }
    
    /**
     * Habilita la edición de texto
     * @param e Evento
     * @param label Componente a editar
     */
    public void menuEditarActionPreformed(ActionEvent e,JLabelHermes label) {
        label.getArea().setEnabled(true);
        label.getArea().setEditable(true);
    }
    
    /**
     * Manda al fondo del diseñador el Componente
     * @param e Evento
     * @param label Componente a mover
     */
    public void menuAtrasActionPreformed(ActionEvent e,JLabelHermes label) {
        
        JLabelHermes tmp=label;
        documento.remove(label);
        documento.add(tmp);
        this.validate();
        this.repaint();
    }
    /**
     * Muestra EL dialogo de cambio de fuente
     * @param e Evento
     * @param label Componente a modificar
     */
    public void menuFuenteActionPerformed(ActionEvent e, JLabelHermes label) {
    /*FontSelectorDialog vf = new FontSelectorDialog(null, "Seleccionar fuente", true,"Texto de prueba,.0123","Texto de prueba,.0123");
    vf.show();*/
        DialogoFont dg=new DialogoFont(null,true,label);
        dg.setVisible(true);
        
    }
    /**
     * Cambia la imagen
     * @param e Evento
     * @param label Componente a modificar
     */
    public void menuCambiarActionPreformed(ActionEvent e,JLabelHermes label) {
        
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Abrir imagen");
        chooser.setCurrentDirectory(new java.io.File("C:\\Archivos de programa\\Campus-Telematika\\Hermes"));
        int resultado = chooser.showOpenDialog(this.getParent());
        if (resultado == JFileChooser.APPROVE_OPTION){
            label.setNombreImagen( chooser.getSelectedFile().getAbsolutePath() );
            label.setIcon(new ImageIcon(chooser.getSelectedFile().getAbsolutePath()));
            label.setBounds(label.getX(),label.getY(),label.getIcon().getIconWidth(),label.getIcon().getIconHeight());
            this.validate();
            this.repaint();
        }
    }
    
    /**
     * Elimina el Componente seleccionado
     * @param e Evento
     * @param label Componente a eliminar
     */
    public void menuEliminarActionPreformed(ActionEvent e,JLabelHermes label) {
        documento.remove(label);
        documento.validate();
        documento.repaint();
    }
    
    /**
     * Redimensiona el componente
     * @param e Evento
     * @param label Componente a modificar
     */
    public void menuRediActionPreformed(ActionEvent e,JLabelHermes label) {
        Color c;
        if (documento.getBackground()==Color.BLACK) {
            label.getCapa().setBorder(new LineBorder(Color.BLACK,3));
            c=Color.BLACK;
        }else{
            label.getCapa().setBorder(new LineBorder(Color.BLUE,3));
            c=Color.BLUE;
        }
        label.anyadirBorde(c);
    }
    
    /**
     * Modifica el cursor
     */
    public void ponerCursor() {
        this.setCursor(yd);
        documento.setCursor(yd);
    }
    
    /**
     * Modifica el cursor
     */
    public void quitarCursor() {
        this.setCursor(dc);
        documento.setCursor(dc);
    }
    
    /**
     * Añade eventos al Componente
     * @param l Componente a añadirle eventos
     */
    private void mak_lis(final JLabel l) {
        l.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent m) {
                ponerCursor();
                l.setBorder(new MatteBorder(1,1,1,1,Color.black));
            }
            public void mouseReleased(MouseEvent m) {
                l.setBorder(null);
                quitarCursor();
                System.out.println("Mouse: X: "+m.getX()+" Y: "+m.getY());
                int x = m.getX()+l.getX();
                
                int y = m.getY()+l.getY()-documento.getY();
                System.out.println("x,y: X: "+x+" Y: "+y);
                if (y > 0 && x > 0 && y < documento.getHeight() && x < documento.getWidth()) {
                    if (!esta(l)) {
                        documento.add(new_lab(l,x,y));
                        documento.repaint();
                    }else {
                        documento.add(new_lab(l,x,y));
                        documento.remove(l);
                        documento.repaint();
                    }
                }
            }
            
            
            
            
            public void mouseClicked(MouseEvent m) {
                
            }
        });
    }
    
    
    /**
     * Añade eventos al componente sobre el diseño
     * @param l Componente a añadirle los eventos
     */
    private void mak_lis_Doc(final JLabel l) {
        
        if (((JLabelHermes)l).getTipo()==JLabelHermes.TEXTO) {
            
            ((JLabelHermes)l).getArea().addMouseListener(new MouseAdapter() {
                public void mousePressed(MouseEvent m) {
                    setCursor(yd);
                    ((JLabelHermes)l).getCapa().setBorder(new MatteBorder(1,1,1,1,Color.black));
                    VHTMLDND.mx=m.getX();
                    VHTMLDND.my=m.getY();
                    final JLabelHermes label=(JLabelHermes)(((JTextPane)m.getSource()).getParent());//((JLabelHermes)m.getSource());
                    System.out.println("Pulsado");
                    if((m.getButton()==MouseEvent.BUTTON3) && (label.getTipo()==JLabelHermes.TEXTO) ) {
                        JPopupMenu popMenu=new JPopupMenu();
                        JMenuItem menuEditar=new JMenuItem("Editar texto");
                        JMenuItem menuRedimensionar=new JMenuItem("Cambiar tamaño");
                        JMenuItem menuFuente=new JMenuItem("Cambiar fuente");
                        JMenuItem menuAtras=new JMenuItem("Enviar al fondo");
                        JMenuItem menuEliminar=new JMenuItem("Eliminar");
                        popMenu.add(menuEliminar);
                        popMenu.add(menuEditar);
                        popMenu.add(menuFuente);
                        popMenu.add(menuRedimensionar);
                        popMenu.add(menuAtras);
                        menuEliminar.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                menuEliminarActionPreformed(e,label);
                            }
                        });
                        
                        popMenu.add(menuEditar);
                        popMenu.add(menuRedimensionar);
                        popMenu.add(menuAtras);
                        menuEditar.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                menuEditarActionPreformed(e,label);
                            }
                        });
                        
                        menuFuente.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                menuFuenteActionPerformed(e,label);
                            }
                        });
                        
                        menuRedimensionar.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                Color c;
                                if (documento.getBackground()==Color.BLACK) {
                                    label.getCapa().setBorder(new LineBorder(Color.BLACK,3));
                                    c=Color.BLACK;
                                }else{
                                    label.getCapa().setBorder(new LineBorder(Color.BLUE,3));
                                    c=Color.BLUE;
                                }
                                label.anyadirBorde(c);
                            }
                        });
                        menuAtras.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                menuAtrasActionPreformed(e,label);
                            }
                        });
                        popMenu.setLightWeightPopupEnabled(false);
                        popMenu.show(label,m.getX(),m.getY());
                        
                        
                        
                        
                    }
                    
                    
                }
                public void mouseReleased(MouseEvent m) {
                    l.setBorder(null);
                    setCursor(dc);
                    System.out.println("Mouse: X: "+m.getX()+" Y: "+m.getY());
                    int x = m.getX()+l.getX()-3;
                    
                    int y = m.getY()+l.getY()-3;//-documento.getY();
                    System.out.println("x,y: X: "+x+" Y: "+y);
                    if ((m.getY()!=VHTMLDND.my)&& (m.getX()!=VHTMLDND.mx) ) {
                        if (y > 0 && x > 0 && y+l.getSize().getHeight() < documento.getHeight() && x+l.getSize().getWidth() < documento.getWidth()) {
                            if (!esta(l)) {
                                documento.add(new_lab(l,x,y));
                                documento.repaint();
                            }else {
                                documento.add(new_lab(l,x,y));
                                documento.remove(l);
                                documento.repaint();
                            }
                        }
                    }
                }
                public void mouseClicked(MouseEvent m) {
                    
                    
                }
            });
            
            
            
        } else {
            
            
            ((JLabelHermes)l).getCapa().addMouseListener(new MouseAdapter() {
                public void mousePressed(MouseEvent m) {
                    setCursor(yd);
                    ((JLabelHermes)l).getCapa().setBorder(new MatteBorder(1,1,1,1,Color.black));
                    VHTMLDND.mx=m.getX();
                    VHTMLDND.my=m.getY();
                    final JLabelHermes label=(JLabelHermes)((JLabel)m.getSource()).getParent();//((JLabelHermes)m.getSource());
                    System.out.println("Pulsado");
                    if((m.getButton()==MouseEvent.BUTTON3) && (label.getTipo()==JLabelHermes.TEXTO) ) {
                        JPopupMenu popMenu=new JPopupMenu();
                        JMenuItem menuEliminar=new JMenuItem("Eliminar");
                        JMenuItem menuEditar=new JMenuItem("Editar texto");
                        JMenuItem menuFuente=new JMenuItem("Cambiar fuente");
                        JMenuItem menuRedimensionar=new JMenuItem("Cambiar tamaño");
                        JMenuItem menuAtras=new JMenuItem("Enviar al fondo");
                        popMenu.add(menuEliminar);
                        popMenu.add(menuEditar);
                        popMenu.add(menuFuente);
                        popMenu.add(menuRedimensionar);
                        popMenu.add(menuAtras);
                        menuEliminar.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                menuEliminarActionPreformed(e,label);
                            }
                        });
                        
                        menuEditar.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                menuEditarActionPreformed(e,label);
                            }
                        });
                        menuFuente.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                menuFuenteActionPerformed(e,label);
                            }
                        });
                        
                        menuRedimensionar.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                menuRediActionPreformed(e,label);
                            }
                        });
                        menuAtras.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                menuAtrasActionPreformed(e,label);
                            }
                        });
                        popMenu.setLightWeightPopupEnabled(false);
                        popMenu.show((JLabelHermes)m.getSource(),m.getX(),m.getY());
                        
                        
                        
                        
                    }else if((m.getButton()==MouseEvent.BUTTON3) && (label.getTipo()==JLabelHermes.IMAGEN) ) {
                        JPopupMenu popMenu=new JPopupMenu();
                        JMenuItem menuEliminar=new JMenuItem("Eliminar");
                        JMenuItem menuRedimensionar=new JMenuItem("Cambiar tamaño");
                        JMenuItem menuAtras=new JMenuItem("Enviar al fondo");
                        JMenuItem menuCambiar=new JMenuItem("Cambiar Imagen");
                        popMenu.add(menuEliminar);
                        popMenu.add(menuRedimensionar);
                        popMenu.add(menuAtras);
                        popMenu.add(menuCambiar);
                        menuEliminar.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                menuEliminarActionPreformed(e,label);
                            }
                        });
                        
                        menuRedimensionar.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                menuRediActionPreformed(e,label);
                            }
                        });
                        menuAtras.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                menuAtrasActionPreformed(e,label);
                            }
                        });
                        menuCambiar.addActionListener(new ActionListener() {
                            public void actionPerformed(ActionEvent e) {
                                menuCambiarActionPreformed(e,label);
                            }
                        });
                        popMenu.setLightWeightPopupEnabled(false);
                        popMenu.show(label,m.getX(),m.getY());
                        
                        
                        
                        
                    }
                    
                    
                }
                public void mouseReleased(MouseEvent m) {
                    l.setBorder(null);
                    setCursor(dc);
                    System.out.println("Mouse: X: "+m.getX()+" Y: "+m.getY());
                    int x = m.getX()+l.getX()-3;
                    
                    int y = m.getY()+l.getY()-3;//-documento.getY();
                    System.out.println("x,y: X: "+x+" Y: "+y);
                    if ((m.getY()!=VHTMLDND.my)&& (m.getX()!=VHTMLDND.mx) ) {
                        if (y > 0 && x > 0 && y+l.getSize().getHeight() < documento.getHeight() && x+l.getSize().getWidth() < documento.getWidth()) {
                            if (!esta(l)) {
                                documento.add(new_lab(l,x,y));
                                documento.repaint();
                            }else {
                                documento.add(new_lab(l,x,y));
                                documento.remove(l);
                                documento.repaint();
                            }
                        }
                    }
                }
                public void mouseClicked(MouseEvent m) {
                    
                    
                }
            });
        }
    }
    
    
    
    
    /**
     * Cursor
     */
    Cursor dc = new Cursor(Cursor.DEFAULT_CURSOR);
    /**
     * Cursor de Arrastre
     */
    Cursor yd = DragSource.DefaultMoveDrop;
    /**
     * Punto de referencia
     */
    Point mp;
    /**
     * Boton de imagen
     */
    ImageIcon botonImg=new ImageIcon(getClass().getResource("/hermes/imagenes/wysiwyg/boton_imagen.png"));
    /**
     * Boton texto
     */
    ImageIcon botonTxt=new ImageIcon(getClass().getResource("/hermes/imagenes/wysiwyg/boton_texto.png"));
    
    /**
     * posicion x relativa
     */
    static int mx;
    /**
     * posicion y relativa
     */
    static int my;
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
     * Menu de Abrir
     */
    private javax.swing.JMenuItem Abrir;
    /**
     * Menu abrir Recientes
     */
    private javax.swing.JMenu AbrirR;
    /**
     * Guardar
     */
    private javax.swing.JMenuItem Guardar;
    /**
     * Elemento del Menu para crear un nuevo Diseño
     */
    private javax.swing.JMenuItem Nuevo;
    /**
     * Elemento del Menu para Salir
     */
    private javax.swing.JMenuItem Salir;
    /**
     * Elemento del Menu para cambiar el color
     */
    private javax.swing.JMenuItem cambiarColor;
    /**
     * Plantilla sobre la que haremos el diseño
     */
    private JPanelHermes documento;
    /**
     * Boton
     */
    private javax.swing.JButton jButton1;
    /**
     * Label
     */
    private javax.swing.JLabel jLabel1;
    /**
     * Label
     */
    private javax.swing.JLabel jLabel2;
    /**
     * LAbel
     */
    private javax.swing.JLabel jLabel4;
    /**
     * Label
     */
    private javax.swing.JLabel jLabel5;
    /**
     * Menu
     */
    private javax.swing.JMenu jMenu1;
    /**
     * Menu
     */
    private javax.swing.JMenu jMenu2;
    /**
     * Menu
     */
    private javax.swing.JMenu jMenu3;
    /**
     * Menu
     */
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPopupMenu menuFondo;
    // End of variables declaration//GEN-END:variables
    
}
