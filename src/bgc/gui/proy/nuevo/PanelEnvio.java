package bgc.gui.proy.nuevo;
import bgc.gui.inicio.VInicio;
import bgc.negocio.proyecto.Proyecto;
import bgc.negocio.correo.ResultadoEnvio;
import hermes.IconoSistema;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.print.PageFormat;
import java.awt.print.PrinterJob;
import java.lang.reflect.Array;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
/**
 * La clase PanelEnvio ofrece la interfaz necesaria para ver los detalles
 * del envío, a que clientes les ha llegado el mail y cuales no, así como
 * para imprimir las etiquetas para las cartas a los clientes a los que no
 * les ha llegado el mail
 *
 * @author Campus - Telematika, S.L.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Lesser GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA.
 */
public class PanelEnvio extends javax.swing.JPanel implements MouseListener{
    
    /**Array con los resultado de los diferentes envíos*/
    ResultadoEnvio []as;
    /**Dirección de correo electronico a la que se está enviando*/
    JLabel actual=null;
    /**Ventana que contiene a este panel*/
    VNuevoProyEnvio padre;
    /**Panel con la barra de progreso*/
    PanelProgreso panelprog;
    /** Crea un nuevo jPanel PanelEnvio */
    public PanelEnvio(Proyecto p,VNuevoProyEnvio padre,ResultadoEnvio []as) {
        initComponents();
        proy=p;
        
        this.padre=padre;
        this.jTabbedPane1.setTitleAt(0,"todos");
        // this.jTabbedPane1.setIconAt(1,new ImageIcon("/home/aitor/Desktop/Proyecto Hermes/Hermes/images/ok.jpeg"));
        this.jTabbedPane1.setTitleAt(1,"Correctos");
        this.jTabbedPane1.setTitleAt(2,"Error");
        //this.jTabbedPane1.setIconAt(2,new ImageIcon("/home/aitor/Desktop/Proyecto Hermes/Hermes/images/error.jpeg"));
        this.as=as;
        IconoSistema.cambiarIcono("/hermes/imagenes/iconos_barra/icono_barra_enviando.gif");
        panelprog=new PanelProgreso(this.padre,as,proy.getHtml(),proy.getAsunto());
        panelprog.setSize(230, 145);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        panelprog.setLocation(screenSize.width/2-getSize().width/2-200, screenSize.height/2-getSize().height/2-250);
        
        this.add(panelprog,0);
        panelprog.func();
        this.validate();
        this.repaint();
    }
    /**Modifica el resultado del envío con el valor pasado a la función*/
    public void setListado(ResultadoEnvio []re) {
        as=re;
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        menuEnviado = new javax.swing.JPopupMenu();
        elementoMenu = new javax.swing.JMenuItem();
        jButton2 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelOk = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        panelMal = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        elementoMenu.setText("ver detalles...");
        elementoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elementoMenuActionPerformed(evt);
            }
        });

        menuEnviado.add(elementoMenu);

        setBackground(new java.awt.Color(216, 228, 198));
        setOpaque(false);
        jButton2.setBackground(new java.awt.Color(240, 240, 240));
        jButton2.setText("Finalizar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTabbedPane1.setBackground(new java.awt.Color(216, 228, 198));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(jPanel2);

        jTabbedPane1.addTab("tab1", jScrollPane2);

        panelOk.setBackground(new java.awt.Color(255, 255, 255));
        org.jdesktop.layout.GroupLayout panelOkLayout = new org.jdesktop.layout.GroupLayout(panelOk);
        panelOk.setLayout(panelOkLayout);
        panelOkLayout.setHorizontalGroup(
            panelOkLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 915, Short.MAX_VALUE)
        );
        panelOkLayout.setVerticalGroup(
            panelOkLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 468, Short.MAX_VALUE)
        );
        jScrollPane1.setViewportView(panelOk);
        panelOk.getAccessibleContext().setAccessibleParent(jScrollPane2);

        jTabbedPane1.addTab("tab4", jScrollPane1);

        panelMal.setBackground(new java.awt.Color(255, 255, 255));
        org.jdesktop.layout.GroupLayout panelMalLayout = new org.jdesktop.layout.GroupLayout(panelMal);
        panelMal.setLayout(panelMalLayout);
        panelMalLayout.setHorizontalGroup(
            panelMalLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 915, Short.MAX_VALUE)
        );
        panelMalLayout.setVerticalGroup(
            panelMalLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 468, Short.MAX_VALUE)
        );
        jScrollPane3.setViewportView(panelMal);
        panelMal.getAccessibleContext().setAccessibleParent(jScrollPane2);

        jTabbedPane1.addTab("tab4", jScrollPane3);

        jButton1.setBackground(new java.awt.Color(240, 240, 240));
        jButton1.setText("Imprimir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 920, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(752, 752, 752)
                .add(jButton1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton2)
                .add(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(jButton2)))
        );
    }// </editor-fold>//GEN-END:initComponents
    /**Permite imprimir las etiquetas para las cartas de los clientes
     * a los que no ha llegado el mail*/
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
          ResultadoEnvio []fallidos=new ResultadoEnvio[Array.getLength(as)];
        int k=0;
        for (int i=0;i<Array.getLength(as);i++)
            if (as[i].getResultado().startsWith("Error")) {
            fallidos[k]=as[i];
            k++;
            }
        if (k==0)
        {
        JOptionPane.showMessageDialog(null,"No hay envios fallidos.\n\n No se imprimirán etiquetas" );
        }
        else
        {
        
        PrinterJob printJob = PrinterJob.getPrinterJob();
        
        PageFormat pag=new PageFormat();
        pag.setOrientation(PageFormat.PORTRAIT);
       
        printJob.setPageable(new PrintLabel(fallidos));
//            printJob.setPrintable(new Imprimir(as));
        if(printJob.printDialog()) {
            try {
                printJob.print();
            } catch (Exception pe) {
                System.out.println(pe);
            }
        }
        JOptionPane.showMessageDialog(null,"Se imprimiran las etiquetas de todos los clientes seleccionados en el mailing.\n\n \t  Si desea imprimir un documento HTML previsualizelo con el explorador." );
     
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    /**Vuelve a la ventana de inicio*/
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:
        VInicio v = new VInicio();
        this.padre.getParent().add(v);
        this.padre.dispose();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        v.setLocation(screenSize.width/2-v.getSize().width/2, screenSize.height/2-v.getSize().height/2-50);
        v.show();
        
    }//GEN-LAST:event_jButton2ActionPerformed
    /**Muestra los detalles del error del envío*/
    private void elementoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elementoMenuActionPerformed
// TODO add your handling code here:
        
        JOptionPane.showMessageDialog(null,as[buscar(actual.getText())].getResultado(),"Detalles del error del evio",JOptionPane.OK_OPTION);
        
        
    }//GEN-LAST:event_elementoMenuActionPerformed
    /**Refresca el jTabbedPane*/
    public void validar() {
        this.jTabbedPane1.validate();
        this.jTabbedPane1.repaint();
        this.setLocation(this.getLocation());
        this.actualizar();
        
    }
    /**Habilita los componentes del jTabbedPane*/
    public void habilitar(){
        
        for(int i=0;i<this.getComponentCount();i++)
            this.getComponent(i).setEnabled(true);
    }
    /**Deshabilita los componentes del jTabbedPane*/
    public void deshabilitar() {
        for(int i=0;i<this.getComponentCount();i++)
            this.getComponent(i).setEnabled(false);
    }
    /**Habilita y actualiza las diferentes pestañas del jTabbedPane*/
    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
// TODO add your handling code here:
        if(this.isVisible()&&(as!=null)) {
            JLabel[] jl=new JLabel[Array.getLength(as)];
            switch(this.jTabbedPane1.getSelectedIndex()) {
                
                case 0:{
                    jPanel2.removeAll();
                    for(int i=0;i<Array.getLength(as);i++) {
                        if(as[i].getResultado().indexOf("Ok") >=0) {
                            jl[i]=new JLabel(as[i].getCliente().getNombre()+" "+as[i].getCliente().getApellido()+"   "+as[i].getCliente().getEmail(),new ImageIcon(getClass().getResource("/bgc/gui/imagenes/ok.jpeg")),JLabel.LEFT);
                            jl[i].setForeground(Color.green);
                            
                        } else {
                            jl[i]=new JLabel(as[i].getCliente().getNombre()+" "+as[i].getCliente().getApellido()+"   "+as[i].getCliente().getEmail(),new ImageIcon(getClass().getResource("/bgc/gui/imagenes/error.jpeg")),JLabel.LEFT);
                            jl[i].setForeground(Color.red);
                            
                        }
                        jl[i].setSize(200,50);
                        jl[i].setLocation(0,i+50);
                        jl[i].addMouseListener(this);
                    }
                    jPanel2.setLayout(new GridLayout(Array.getLength(as),1));
                    for(int i=0;i<Array.getLength(as);i++) {
                        jPanel2.add(jl[i]);
                        this.validate();
                        this.repaint();
                    }
                    
                }break;
                
                case 1:{
                    panelOk.removeAll();
                    panelOk.setLayout(new GridLayout(Array.getLength(as),1));
                    for(int i=0;i<Array.getLength(as);i++) {
                        if(as[i].getResultado().indexOf("Ok") >=0) {
                            jl[i]=new JLabel(as[i].getCliente().getNombre()+as[i].getCliente().getApellido()+"   "+as[i].getCliente().getEmail(),new ImageIcon(getClass().getResource("/bgc/gui/imagenes/ok.jpeg")),JLabel.LEFT);
                            jl[i].setForeground(Color.green);
                            
                            
                            
                            jl[i].setSize(200,50);
                            jl[i].setLocation(0,i+50);
                            jl[i].addMouseListener(this);
                            panelOk.add(jl[i]);
                        }
                    }
                    
                    this.validate();
                    this.repaint();
                    
                    
                    
                }break;
                
                case 2:{
                    panelMal.removeAll();
                    panelMal.setLayout(new GridLayout(Array.getLength(as),1));
                    for(int i=0;i<Array.getLength(as);i++) {
                        if(as[i].getResultado().indexOf("Ok") <0) {
                            jl[i]=new JLabel(as[i].getCliente().getNombre()+" "+as[i].getCliente().getApellido()+"   "+as[i].getCliente().getEmail(),new ImageIcon(getClass().getResource("/bgc/gui/imagenes/error.jpeg")),JLabel.LEFT);
                            jl[i].setForeground(Color.red);
                            
                            
                            jl[i].setSize(200,50);
                            jl[i].setLocation(0,i+50);
                            jl[i].addMouseListener(this);
                            panelMal.add(jl[i]);
                        }
                    }
                    
                    
                    
                    this.validate();
                    this.repaint();
                    
                    
                    
                }break;
            }
        }
    }//GEN-LAST:event_jTabbedPane1StateChanged
    /**Actualiza los paneles contenidos en las pestañas del jTabbedPane*/
    public void actualizar() {
        this.jPanel2.removeAll();
        JLabel[] jl=new JLabel[Array.getLength(as)];
        
        for(int i=0;i<Array.getLength(as);i++) {
            if(as[i]!=null) {
                if(as[i].getResultado().indexOf("Ok") >=0) {
                    jl[i]=new JLabel(as[i].getCliente().getNombre()+" "+as[i].getCliente().getApellido()+"   "+as[i].getCliente().getEmail(),new ImageIcon("/home/aitor/Desktop/Proyecto Hermes/Hermes/images/ok.jpeg"),JLabel.LEFT);
                    jl[i].setForeground(Color.green);
                    
                } else {
                    jl[i]=new JLabel(as[i].getCliente().getNombre()+" "+as[i].getCliente().getApellido()+"   "+as[i].getCliente().getEmail(),new ImageIcon("/home/aitor/Desktop/Proyecto Hermes/Hermes/images/error.jpeg"),JLabel.LEFT);
                    jl[i].setForeground(Color.red);
                    
                }
                jl[i].setSize(200,50);
                jl[i].setLocation(0,i+50);
                jl[i].addMouseListener(this);
            }
        }
        jPanel2.setLayout(new GridLayout(Array.getLength(as),1));
        for(int i=0;i<Array.getLength(as);i++) {
            if(as[i]!=null)
                jPanel2.add(jl[i]);
            this.validate();
            this.repaint();
        }
        
    }
    
    /**Proyecto que estamos enviando*/
    Proyecto proy;
    /**No es necesaria la implementacion*/
    public void mouseReleased(java.awt.event.MouseEvent e) {
    }
    /**No es necesaria la implementacion*/
    public void mousePressed(java.awt.event.MouseEvent e) {
    }
    /**No es necesaria la implementacion*/
    public void mouseExited(java.awt.event.MouseEvent e) {
    }
    /**No es necesaria la implementacion*/
    public void mouseEntered(java.awt.event.MouseEvent e) {
    }
    /**Muestra el menu para ver detalles del envío*/
    public void mouseClicked(java.awt.event.MouseEvent e) {
        actual=(JLabel)e.getSource();
        if(e.getButton()==MouseEvent.BUTTON3) {
            if(buscarError(actual.getText())) {
             
                menuEnviado.show(actual,e.getX(),e.getY());
               
            }
        }
    }
    /**Devuelve si ha habido un error en el envío*/
    public boolean buscarError(String s) {
        s=s.substring(s.lastIndexOf(" ")+1);
      
        for(int i=0;i<Array.getLength(as);i++)
            if(as[i].getCliente().getEmail().equals(s))
                if(as[i].getResultado().indexOf("Error")>=0)
                    return true;
        return false;
        
    }
    /**Devuelve la posición del array donde se encuentra el string pasado a la función*/
    public int buscar(String s) {
        s=s.substring(s.lastIndexOf(" ")+1);
        for(int i=0;i<Array.getLength(as);i++)
            if(as[i].getCliente().getEmail().equals(s))
                return i;
        return -1;
        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JMenuItem elementoMenu;
    public javax.swing.JButton jButton1;
    public javax.swing.JButton jButton2;
    public javax.swing.JPanel jPanel2;
    public javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JScrollPane jScrollPane3;
    public javax.swing.JTabbedPane jTabbedPane1;
    public javax.swing.JPopupMenu menuEnviado;
    public javax.swing.JPanel panelMal;
    public javax.swing.JPanel panelOk;
    // End of variables declaration//GEN-END:variables
    
}
